<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use VK\Client\VKApiClient;

class HomeController extends Controller
{
//    /**
//     * Create a new controller instance.
//     *
//     * @return void
//     */
//    public function __construct()
//    {
//        $this->middleware('auth');
//    }

    /**
     * @return string
     */
    public function index()
    {
        header("HTTP/1.1 200 OK");
        $vk_callback_event =  json_decode(file_get_contents("php://input"), true);


        if ($vk_callback_event['secret'] !== getenv('VK_SECRET_TOKEN')) {
            return response('nioh');
        }

        switch ($vk_callback_event['type']){
                case 'confirmation':
                    return response(getenv('VK_CONFIRMATION_CODE'));
                    break;

                case 'message_new':
                    // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    //–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    $keyboard_index =
                        [
                            "one_time" => false,
                            "buttons" => [
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"speech_recognition\"}",
                                            "label" => "–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏"
                                        ],
                                        "color" => "positive"
                                    ],
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"speech_synthesis\" }",
                                            "label" => "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏"
                                        ],
                                        "color" => "positive"
                                    ],
                                ],
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"history_day\"}",
                                            "label" => "–ò—Å—Ç–æ—Ä–∏—è –¥–Ω—è"
                                        ],
                                        "color" => "positive"
                                    ],
                                ]
                            ]

                        ];

                    // –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
                    $keyboard_speech_synthesis =
                        [
                            "one_time" => false,
                            "buttons" => [
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"voice\"}",
                                            "label" => "–°–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å"
                                        ],
                                        "color" => "positive"
                                    ]
                                ],
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"back_index\"}",
                                            "label" => "–ì–ª–∞–≤–Ω–∞—è"
                                        ],
                                        "color" => "negative"
                                    ],
                                ]
                            ]

                        ];

                    // –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –¥–ª—è —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞
                    $keyboard_speech_synthesis_voice =
                        [
                            "one_time" => false,
                            "buttons" => [
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => json_encode(["button" => "voice", "parametr_1" => "voice_man"]),
                                            "label" => "üó£ –ú—É–∂—á–∏–Ω–∞"
                                        ],
                                        "color" => "positive"
                                    ],
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => json_encode(["button" => "voice", "parametr_1" => "voice_woman"]),
                                            "label" => "üó£ –ñ–µ–Ω—â–∏–Ω–∞"
                                        ],
                                        "color" => "positive"
                                    ]
                                ],
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => json_encode([ "button" => "voice", "parametr_1" => "back_speech_synthesis"]),
                                            "label" => "–ù–∞–∑–∞–¥"
                                        ],
                                        "color" => "negative"
                                    ],
                                ]
                            ]

                        ];

                    // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏
                    $keyboard_speech_recognition =
                        [
                            "one_time" => false,
                            "buttons" => [
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" =>  json_encode(["button" => "speech_recognition_instructions"]),
                                            "label" => "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥—É"
                                        ],
                                        "color" => "positive"
                                    ],

                                ],
                                [
                                    [
                                        "action" => [
                                            "type" => "text",
                                            "payload" => "{\"button\": \"back_index\"}",
                                            "label" => "üîô–ì–ª–∞–≤–Ω–∞—è"
                                        ],
                                        "color" => "negative"
                                    ],
                                ]
                            ]

                        ];


                    try {
                        $object = $vk_callback_event['object']['message'] ?? [];
                        $user_id = $object['from_id'] ?? 0;
                        $txt = $object['text'] ?? "";

                        if (isset($object['payload'])){
                            $payload = json_decode($object['payload'], true);
                            $value_button = $payload['button'];
                            $value_parametr_1 = $payload['parametr_1'];
                            $this->getlog(json_encode($payload));
                        } else{
                            $payload  = null;
                        }



                        // –ø–æ–ª—É—á–∞—é –µ–≥–æ –∏–º—è
                        $vk = new VKApiClient('5.103');
                        $response = $vk->users()->get(getenv('VK_TOKEN'), array(
                            'user_ids' => [$user_id],
                        ));
                        $name = $response[0]['first_name'];


//                        switch ($value_button) {
//                            case  "start" :
//                                $message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å $name! \n –Ø –ú—É–ª—å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ [vladislav_nep | –ù–µ–ø–æ–º–Ω—è—â–∏—Ö –í–ª–∞–¥–∏—Å–ª–∞–≤], —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Å–∞–π—Ç, –µ–≥–æ –Ω–∞–π–¥–µ—Ç–µ –≤ —Å—Å—ã–ª–∫–∞—Ö. \n –ß—Ç–æ —è —É–º–µ—é: \n 1Ô∏è‚É£ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  \n 2Ô∏è‚É£ –ú–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å \n 3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç \n 4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç \n 5Ô∏è‚É£ –ü–æ–≤–µ—Å–∏–ª–∏—Ç—å –≤–∞—Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è! \n –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–æ–∫, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã. \n \n –ù–∞–¥–µ—é—Å—å —è –≤–∞–º –ø–æ–º–æ–≥—É –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!";
//                                $send_value_keyboard = $keyboard_index;
//                                break;
//
//                            case  "speech_recognition" :
//                                $message = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 30 —Å–µ–∫—É–Ω–¥! –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)";
//                                $send_value_keyboard = $keyboard_speech_recognition;
//                                break;
//
//                            case "speech_recognition_instructions":
//                                $message = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–æ–∫–∞ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å)";
//                                $send_value_keyboard = $keyboard_speech_recognition;
//                                break;
//
//                            case "back_index" :
//                                $message = "";
//                                $send_value_keyboard = $keyboard_index;
//                                break;
//
//                            case  "speech_synthesis" :
//                                $message = "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)";
//                                $send_value_keyboard = $keyboard_speech_synthesis;
//                                break;
//
//                            case "voice" :
//                                $message = "";
//                                $send_value_keyboard = $keyboard_speech_synthesis_voice;
//                                switch ($value_parametr_1){
//                                    case "back_speech_synthesis":
//                                        $message = "";
//                                        $send_value_keyboard = $keyboard_speech_synthesis;
//                                        break;
//                                    case "voice_man":
//                                        $message  = "–°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—é –æ—á–µ—Ä–µ–¥—å, –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –ú—É–∂—á–∏–Ω–∞";
//                                        break;
//                                    case "voice_woman":
//                                        $message  = "–°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—é –æ—á–µ—Ä–µ–¥—å, –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –ñ–µ–Ω—â–∏–Ω–∞";
//                                        break;
//                                }
//                                break;
//
//                                case  "history_day" :
//                                    $message = "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ";
//                                        $send_value_keyboard = "";
//                                        break;
//
//
//                                    default:
//                                        $message = "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª! –ü–æ—á–µ–º—É? \n 1) –ö–æ–º–∞–Ω–¥—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫ \n 2) –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ \n 3) –ê—É–¥–∏–æ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏";
//                                        $send_value_keyboard = $keyboard_index;
//                                        break;
//                                    }
                        $send_value_keyboard = $keyboard_index;
                        $message = "—Ç–µ—Å—Ç";

                                        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        $vk = new VKApiClient('5.103');
                                        $response = $vk->messages()->send(getenv('VK_TOKEN'), array(
                                            'user_id' => $user_id,
                                            'message' => $message,
                                            'keyboard' => json_encode($send_value_keyboard),
                                            'random_id' => rand(),
                                        ));
                                        echo 'ok';
                                        break;

                    } catch (\VK\Exceptions\VKApiException $e){
                        $this -> getlog($e -> getMessage());
                    }

                  }

    }

    function getlog($msg){
        file_put_contents('php://stdout', $msg. "\n");
    }

}
